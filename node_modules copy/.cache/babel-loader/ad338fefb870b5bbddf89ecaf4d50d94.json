{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mateus.leao/Desktop/react-covid-tracker/react-covid-tracker/src/components/Chart/Chart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    deaths,\n    recovered\n  },\n  country\n}) => {\n  _s();\n\n  const [dailyData, setDailyData] = useState([]); //empty array since dailyData is an array\n\n  useEffect(() => {\n    //use affect is being used with a callback function inside (fetchAPI)\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData()); //fetchDailyData comes from our api\n    }; //console.log(dailyData);\n\n\n    fetchAPI();\n  }, []); //empty array here makes use effect work like ComponenDidMount (starting empty)\n\n  const lineChart = dailyData.length != 0 ?\n  /*#__PURE__*/\n  //using ternary operator like an if\n  _jsxDEV(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      //dest date and return date -- map that returns array of all dates\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: 'Infected',\n        borderColor: 'red',\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true\n      }]\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this) : null;\n  const barChart = confirmed ? /*#__PURE__*/_jsxDEV(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n        data: [confirmed, recovered, deaths] //coming from props\n\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${country}`\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 13\n  }, this) : null; //if there's a country returns bar, if not returns line chart\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: country ? barChart : lineChart\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chart, \"k/DxwZSu/1zHTtHlTKnhZOTCIIE=\");\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/mateus.leao/Desktop/react-covid-tracker/react-covid-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","confirmed","deaths","recovered","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","legend","display","title","text","container"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;;AAGA,MAAMC,KAAK,GAAG,CAAE;AAACC,EAAAA,IAAI,EAAG;AAACC,IAAAA,SAAD;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,GAAR;AAAwCC,EAAAA;AAAxC,CAAF,KAAuD;AAAA;;AACjE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C,CADiE,CACjB;;AAEhDC,EAAAA,SAAS,CAAC,MAAM;AAAE;AACd,UAAMa,QAAQ,GAAG,YAAY;AACzBD,MAAAA,YAAY,CAAE,MAAMX,cAAc,EAAtB,CAAZ,CADyB,CACc;AAC1C,KAFD,CADY,CAKZ;;;AAEAY,IAAAA,QAAQ;AACX,GARQ,EAQN,EARM,CAAT,CAHiE,CAWzD;;AAGR,QAAMC,SAAS,GACXH,SAAS,CAACI,MAAV,IAAoB,CAApB;AAAA;AAEA;AACA,UAAC,IAAD;AACA,IAAA,IAAI,EAAI;AACJC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAE;AAAEC,QAAAA;AAAF,OAAF,KAAeA,IAA7B,CADJ;AACwC;AAC5CC,MAAAA,QAAQ,EAAE,CAAC;AACPb,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEV,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADC;AAEPa,QAAAA,KAAK,EAAE,UAFA;AAGPC,QAAAA,WAAW,EAAE,SAHN;AAIPC,QAAAA,IAAI,EAAE;AAJC,OAAD,EAKP;AACChB,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAET,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADP;AAECY,QAAAA,KAAK,EAAE,UAFR;AAGCC,QAAAA,WAAW,EAAE,KAHd;AAICE,QAAAA,eAAe,EAAE,sBAJlB;AAKCD,QAAAA,IAAI,EAAE;AALP,OALO;AAFN;AADR;AAAA;AAAA;AAAA;AAAA,UAHA,GAmBM,IApBV;AAwBA,QAAME,QAAQ,GACVjB,SAAS,gBAEL,QAAC,GAAD;AACA,IAAA,IAAI,EAAE;AACFS,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADN;AAEFG,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,KAAK,EAAE,QADA;AAEPG,QAAAA,eAAe,EAAE,CACb,sBADa,EAEb,sBAFa,EAGb,sBAHa,CAFV;AAOXjB,QAAAA,IAAI,EAAE,CAACC,SAAD,EAAYE,SAAZ,EAAuBD,MAAvB,CAPK,CAO0B;;AAP1B,OAAD;AAFR,KADN;AAaA,IAAA,OAAO,EAAE;AACLiB,MAAAA,MAAM,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV,OADH;AAELC,MAAAA,KAAK,EAAE;AAACD,QAAAA,OAAO,EAAE,IAAV;AAAgBE,QAAAA,IAAI,EAAG,oBAAmBlB,OAAQ;AAAlD;AAFF;AAbT;AAAA;AAAA;AAAA;AAAA,UAFK,GAoBL,IArBR,CAtCiE,CAgEjE;;AACA,sBACI;AAAK,IAAA,SAAS,EAAKN,MAAM,CAACyB,SAA1B;AAAA,cACMnB,OAAO,GAAGc,QAAH,GAAcV;AAD3B;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAtED;;GAAMT,K;;KAAAA,K;AA0EN,eAAeA,KAAf","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css'\n\n\nconst Chart = ( {data : {confirmed, deaths, recovered}, country}) => {\n    const [dailyData, setDailyData] = useState([]); //empty array since dailyData is an array\n\n    useEffect(() => { //use affect is being used with a callback function inside (fetchAPI)\n        const fetchAPI = async () => {\n            setDailyData (await fetchDailyData()); //fetchDailyData comes from our api\n        }\n\n        //console.log(dailyData);\n\n        fetchAPI();\n    }, []); //empty array here makes use effect work like ComponenDidMount (starting empty)\n\n\n    const lineChart = (\n        dailyData.length != 0\n        ? (\n        //using ternary operator like an if\n        <Line \n        data = {{\n            labels: dailyData.map(( { date }) => date), //dest date and return date -- map that returns array of all dates\n            datasets: [{\n                data: dailyData.map(({ confirmed }) => confirmed),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill: true,\n            }, {\n                data: dailyData.map(({ deaths }) => deaths),\n                label: 'Infected',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                fill: true,\n            }],\n        }}\n        />) : null\n    );\n\n\n    const barChart = (\n        confirmed\n        ? (\n            <Bar \n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: 'People',\n                    backgroundColor: [\n                        'rgba(0, 0, 255, 0.5)',\n                        'rgba(0, 255, 0, 0.5)',\n                        'rgba(255, 0, 0, 0.5)',\n                ],\n                data: [confirmed, recovered, deaths] //coming from props\n                }]\n            }}\n            options={{\n                legend: {display: false },\n                title: {display: true, text: `Current state in ${country}`},\n             }}\n              />\n        ) : null\n    );\n\n\n\n    //if there's a country returns bar, if not returns line chart\n    return (\n        <div className = { styles.container }>\n            { country ? barChart : lineChart }\n        </div>\n    )\n}\n\n\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}